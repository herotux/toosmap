# Generated by Django 5.1.5 on 2025-01-28 20:54

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('coordinates', django.contrib.gis.db.models.fields.PointField(srid=4326)),
            ],
            options={
                'verbose_name': 'شهر',
                'verbose_name_plural': 'شهر ها',
                'db_table': 'cities',
            },
        ),
        migrations.CreateModel(
            name='role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('display_name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'roles',
            },
        ),
        migrations.CreateModel(
            name='setting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('label', models.CharField(max_length=100)),
                ('value', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'settings',
            },
        ),
        migrations.CreateModel(
            name='user',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=30, null=True)),
                ('last_name', models.CharField(blank=True, max_length=30, null=True)),
                ('user_code', models.CharField(default='1971830316', max_length=10, unique=True)),
                ('mobile', models.CharField(max_length=15, unique=True)),
                ('national_code', models.CharField(blank=True, max_length=10, null=True)),
                ('national', models.BooleanField(default=False)),
                ('province_id', models.IntegerField(blank=True, null=True)),
                ('city_id', models.IntegerField(blank=True, null=True)),
                ('region', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('email_verified_at', models.DateTimeField(blank=True, null=True)),
                ('password', models.CharField(max_length=128)),
                ('remember_token', models.CharField(blank=True, max_length=100, null=True)),
                ('active', models.BooleanField(default=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('month', models.IntegerField(blank=True, null=True)),
                ('day', models.IntegerField(blank=True, null=True)),
                ('wallets', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('last_active', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_mobile_confirmed', models.BooleanField(default=False)),
                ('created_by_admin', models.BooleanField(default=False)),
                ('lat', models.DecimalField(blank=True, decimal_places=9, max_digits=12, null=True)),
                ('lng', models.DecimalField(blank=True, decimal_places=9, max_digits=12, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='category_job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(unique=True)),
                ('label', models.CharField(blank=True, max_length=100, null=True)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='categories/icons/')),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories/images/')),
                ('banner', models.ImageField(blank=True, null=True, upload_to='categories/banners/')),
                ('meta_keywords', models.TextField(blank=True, null=True)),
                ('meta_description', models.TextField(blank=True, null=True)),
                ('has_slider', models.BooleanField(default=False)),
                ('sort_order', models.IntegerField(default=0)),
                ('view_counts', models.IntegerField(default=0)),
                ('status', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='core.category_job')),
            ],
            options={
                'db_table': 'category_job',
            },
        ),
        migrations.CreateModel(
            name='category_user',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.category_job')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('coordinates', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='counties', to='core.city')),
            ],
            options={
                'verbose_name': 'شهرستان ',
                'verbose_name_plural': 'شهرستان ها',
                'db_table': 'counties',
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='نام منطقه')),
                ('geometry', django.contrib.gis.db.models.fields.PolygonField(srid=4326, verbose_name='هندسه')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='districts', to='core.city', verbose_name='شهر')),
            ],
            options={
                'db_table': 'districts',
            },
        ),
        migrations.CreateModel(
            name='job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('store_name', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('job_code', models.CharField(default='3434450624', max_length=10, unique=True)),
                ('mobile', models.CharField(blank=True, max_length=15, null=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('region', models.CharField(blank=True, max_length=100, null=True)),
                ('address', models.TextField()),
                ('post_code', models.CharField(blank=True, max_length=20, null=True)),
                ('lat', models.DecimalField(decimal_places=6, max_digits=9)),
                ('lng', models.DecimalField(decimal_places=6, max_digits=9)),
                ('in_person', models.BooleanField(default=False)),
                ('internet_sales', models.BooleanField(default=False)),
                ('single_sale', models.BooleanField(default=False)),
                ('wholesale_sales', models.BooleanField(default=False)),
                ('is_producer', models.BooleanField(default=False)),
                ('unused_product', models.BooleanField(default=False)),
                ('used_product', models.BooleanField(default=False)),
                ('buyer', models.BooleanField(default=False)),
                ('purchase_in_store', models.BooleanField(default=False)),
                ('purchase_in_home', models.BooleanField(default=False)),
                ('slang', models.CharField(blank=True, max_length=255, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('about', models.TextField(blank=True, null=True)),
                ('profile', models.ImageField(blank=True, null=True, upload_to='jobs/profiles/')),
                ('last_active', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('city', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.city')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'jobs',
            },
        ),
        migrations.CreateModel(
            name='JobHours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('saturday', models.TimeField()),
                ('sunday', models.TimeField()),
                ('monday', models.TimeField()),
                ('tuesday', models.TimeField()),
                ('wednesday', models.TimeField()),
                ('thursday', models.TimeField()),
                ('friday', models.TimeField()),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.job')),
            ],
            options={
                'db_table': 'job_hours',
            },
        ),
        migrations.CreateModel(
            name='JobLinks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('website', models.URLField(blank=True, null=True)),
                ('telegram', models.URLField(blank=True, null=True)),
                ('instagram', models.URLField(blank=True, null=True)),
                ('robika', models.URLField(blank=True, null=True)),
                ('eitaa', models.URLField(blank=True, null=True)),
                ('bale', models.URLField(blank=True, null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.job')),
            ],
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('coordinates', django.contrib.gis.db.models.fields.PointField(srid=4326)),
            ],
            options={
                'verbose_name': 'استان',
                'verbose_name_plural': 'استان ها',
                'db_table': 'provinces',
                'indexes': [models.Index(fields=['coordinates'], name='province_coordinates_idx')],
            },
        ),
        migrations.AddField(
            model_name='job',
            name='province',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.province'),
        ),
        migrations.AddField(
            model_name='city',
            name='province',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cities', to='core.province'),
        ),
        migrations.CreateModel(
            name='role_user',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Village',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('coordinates', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='villages', to='core.county')),
            ],
            options={
                'verbose_name': 'روستا',
                'verbose_name_plural': 'روستا ها',
                'db_table': 'villages',
            },
        ),
        migrations.AddIndex(
            model_name='county',
            index=models.Index(fields=['coordinates'], name='county_coordinates_idx'),
        ),
        migrations.AddIndex(
            model_name='district',
            index=models.Index(fields=['geometry'], name='district_coordinates_idx'),
        ),
        migrations.AddIndex(
            model_name='city',
            index=models.Index(fields=['coordinates'], name='city_coordinates_idx'),
        ),
        migrations.AddIndex(
            model_name='village',
            index=models.Index(fields=['coordinates'], name='village_coordinates_idx'),
        ),
    ]
